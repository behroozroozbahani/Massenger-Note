<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PortalCore.Application</name>
    </assembly>
    <members>
        <member name="P:PortalCore.Application.Common.Identity.IApplicationRoleManager.Roles">
            <summary>
            Gets an IQueryable collection of Roles if the persistence store is an <see cref="T:Microsoft.AspNetCore.Identity.IQueryableRoleStore`1"/>,
            otherwise throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
            <value>An IQueryable collection of Roles if the persistence store is an <see cref="T:Microsoft.AspNetCore.Identity.IQueryableRoleStore`1"/>.</value>
            <exception cref="T:System.NotSupportedException">Thrown if the persistence store is not an <see cref="T:Microsoft.AspNetCore.Identity.IQueryableRoleStore`1"/>.</exception>
            <remarks>
            Callers to this property should use <see cref="P:PortalCore.Application.Common.Identity.IApplicationRoleManager.SupportsQueryableRoles"/> to ensure the backing role store supports
            returning an IQueryable list of roles.
            </remarks>
        </member>
        <member name="P:PortalCore.Application.Common.Identity.IApplicationRoleManager.KeyNormalizer">
            <summary>
            Gets the normalizer to use when normalizing role names to keys.
            </summary>
            <value>
            The normalizer to use when normalizing role names to keys.
            </value>
        </member>
        <member name="P:PortalCore.Application.Common.Identity.IApplicationRoleManager.ErrorDescriber">
            <summary>
            Gets the <see cref="T:Microsoft.AspNetCore.Identity.IdentityErrorDescriber"/> used to provider error messages.
            </summary>
            <value>
            The <see cref="T:Microsoft.AspNetCore.Identity.IdentityErrorDescriber"/> used to provider error messages.
            </value>
        </member>
        <member name="P:PortalCore.Application.Common.Identity.IApplicationRoleManager.RoleValidators">
            <summary>
            Gets a list of validators for roles to call before persistence.
            </summary>
            <value>A list of validators for roles to call before persistence.</value>
        </member>
        <member name="P:PortalCore.Application.Common.Identity.IApplicationRoleManager.Logger">
            <summary>
            Gets the <see cref="T:Microsoft.Extensions.Logging.ILogger"/> used to log messages from the manager.
            </summary>
            <value>
            The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> used to log messages from the manager.
            </value>
        </member>
        <member name="P:PortalCore.Application.Common.Identity.IApplicationRoleManager.SupportsQueryableRoles">
            <summary>
            Gets a flag indicating whether the underlying persistence store supports returning an <see cref="T:System.Linq.IQueryable"/> collection of roles.
            </summary>
            <value>
            true if the underlying persistence store supports returning an <see cref="T:System.Linq.IQueryable"/> collection of roles, otherwise false.
            </value>
        </member>
        <member name="P:PortalCore.Application.Common.Identity.IApplicationRoleManager.SupportsRoleClaims">
            <summary>
            Gets a flag indicating whether the underlying persistence store supports <see cref="T:System.Security.Claims.Claim"/>s for roles.
            </summary>
            <value>
            true if the underlying persistence store supports <see cref="T:System.Security.Claims.Claim"/>s for roles, otherwise false.
            </value>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationRoleManager.AddClaimAsync(PortalCore.Domain.Entities.Identity.Role,System.Security.Claims.Claim)">
            <summary>
            Adds a claim to a role.
            </summary>
            <param name="role">The role to add the claim to.</param>
            <param name="claim">The claim to add.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult"/>
            of the operation.
            </returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationRoleManager.CreateAsync(PortalCore.Domain.Entities.Identity.Role)">
            <summary>
            Creates the specified <paramref name="role"/> in the persistence store.
            </summary>
            <param name="role">The role to create.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.
            </returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationRoleManager.DeleteAsync(PortalCore.Domain.Entities.Identity.Role)">
            <summary>
            Deletes the specified <paramref name="role"/>.
            </summary>
            <param name="role">The role to delete.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult"/> for the delete.
            </returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationRoleManager.FindByIdAsync(System.String)">
            <summary>
            Finds the role associated with the specified <paramref name="roleId"/> if any.
            </summary>
            <param name="roleId">The role ID whose role should be returned.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the role
            associated with the specified <paramref name="roleId"/>
            </returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationRoleManager.FindByNameAsync(System.String)">
            <summary>
            Finds the role associated with the specified <paramref name="roleName"/> if any.
            </summary>
            <param name="roleName">The name of the role to be returned.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the role
            associated with the specified <paramref name="roleName"/>
            </returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationRoleManager.GetClaimsAsync(PortalCore.Domain.Entities.Identity.Role)">
            <summary>
            Gets a list of claims associated with the specified <paramref name="role"/>.
            </summary>
            <param name="role">The role whose claims should be returned.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the list of <see cref="T:System.Security.Claims.Claim"/>s
            associated with the specified <paramref name="role"/>.
            </returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationRoleManager.NormalizeKey(System.String)">
            <summary>
            Gets a normalized representation of the specified <paramref name="key"/>.
            </summary>
            <param name="key">The value to normalize.</param>
            <returns>A normalized representation of the specified <paramref name="key"/>.</returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationRoleManager.RemoveClaimAsync(PortalCore.Domain.Entities.Identity.Role,System.Security.Claims.Claim)">
            <summary>
            Removes a claim from a role.
            </summary>
            <param name="role">The role to remove the claim from.</param>
            <param name="claim">The claim to remove.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult"/>
            of the operation.
            </returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationRoleManager.RoleExistsAsync(System.String)">
            <summary>
            Gets a flag indicating whether the specified <paramref name="roleName"/> exists.
            </summary>
            <param name="roleName">The role name whose existence should be checked.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing true if the role name exists, otherwise false.
            </returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationRoleManager.UpdateAsync(PortalCore.Domain.Entities.Identity.Role)">
            <summary>
            Updates the specified <paramref name="role"/>.
            </summary>
            <param name="role">The role to updated.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult"/> for the update.
            </returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationRoleManager.UpdateNormalizedRoleNameAsync(PortalCore.Domain.Entities.Identity.Role)">
            <summary>
            Updates the normalized name for the specified <paramref name="role"/>.
            </summary>
            <param name="role">The role whose normalized name needs to be updated.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.
            </returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationRoleManager.GetRoleNameAsync(PortalCore.Domain.Entities.Identity.Role)">
            <summary>
            Gets the name of the specified <paramref name="role"/>.
            </summary>
            <param name="role">The role whose name should be retrieved.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the name of the
            specified <paramref name="role"/>.
            </returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationRoleManager.SetRoleNameAsync(PortalCore.Domain.Entities.Identity.Role,System.String)">
            <summary>
            Sets the name of the specified <paramref name="role"/>.
            </summary>
            <param name="role">The role whose name should be set.</param>
            <param name="name">The name to set.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult"/>
            of the operation.
            </returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationRoleManager.GetRoleIdAsync(PortalCore.Domain.Entities.Identity.Role)">
            <summary>
            Gets the ID of the specified <paramref name="role"/>.
            </summary>
            <param name="role">The role whose ID should be retrieved.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the ID of the
            specified <paramref name="role"/>.
            </returns>
        </member>
        <member name="P:PortalCore.Application.Common.Identity.IApplicationRoleStore.ErrorDescriber">
            <summary>
            Gets or sets the <see cref="T:Microsoft.AspNetCore.Identity.IdentityErrorDescriber"/> for any error that occurred with the current operation.
            </summary>
        </member>
        <member name="P:PortalCore.Application.Common.Identity.IApplicationRoleStore.AutoSaveChanges">
            <summary>
            Gets or sets a flag indicating if changes should be persisted after CreateAsync, UpdateAsync and DeleteAsync are called.
            </summary>
            <value>
            True if changes should be automatically persisted, otherwise false.
            </value>
        </member>
        <member name="P:PortalCore.Application.Common.Identity.IApplicationRoleStore.Roles">
            <summary>
            A navigation property for the roles the store contains.
            </summary>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationRoleStore.ConvertIdFromString(System.String)">
            <summary>
            Adds the <paramref name="claim"/> given to the specified <paramref name="role"/>.
            </summary>
            <param name="role">The role to add the claim to.</param>
            <param name="claim">The claim to add to the role.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            Task AddClaimAsync(Role role, Claim claim, CancellationToken cancellationToken = default);
            <summary>
            Converts the provided <paramref name="id"/> to a strongly typed key object.
            </summary>
            <param name="id">The id to convert.</param>
            <returns>An instance of <typeparamref name="TKey"/> representing the provided <paramref name="id"/>.</returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationRoleStore.ConvertIdToString(System.Guid)">
            <summary>
            Converts the provided <paramref name="id"/> to its string representation.
            </summary>
            <param name="id">The id to convert.</param>
            <returns>An <see cref="T:System.String"/> representation of the provided <paramref name="id"/>.</returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationRoleStore.CreateAsync(PortalCore.Domain.Entities.Identity.Role,System.Threading.CancellationToken)">
            <summary>
            Creates a new role in a store as an asynchronous operation.
            </summary>
            <param name="role">The role to create in the store.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult"/> of the asynchronous query.</returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationRoleStore.DeleteAsync(PortalCore.Domain.Entities.Identity.Role,System.Threading.CancellationToken)">
            <summary>
            Deletes a role from the store as an asynchronous operation.
            </summary>
            <param name="role">The role to delete from the store.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult"/> of the asynchronous query.</returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationRoleStore.GetRoleIdAsync(PortalCore.Domain.Entities.Identity.Role,System.Threading.CancellationToken)">
            <summary>
            Gets the ID for a role from the store as an asynchronous operation.
            </summary>
            <param name="role">The role whose ID should be returned.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that contains the ID of the role.</returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationRoleStore.GetRoleNameAsync(PortalCore.Domain.Entities.Identity.Role,System.Threading.CancellationToken)">
            <summary>
            Gets the name of a role from the store as an asynchronous operation.
            </summary>
            /// <param name="role">The role whose name should be returned.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that contains the name of the role.</returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationRoleStore.SetRoleNameAsync(PortalCore.Domain.Entities.Identity.Role,System.String,System.Threading.CancellationToken)">
            <summary>
            Sets the name of a role in the store as an asynchronous operation.
            </summary>
            <param name="role">The role whose name should be set.</param>
            <param name="roleName">The name of the role.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationRoleStore.FindByIdAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Finds the role who has the specified ID as an asynchronous operation.
            </summary>
            <param name="id">The role ID to look for.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that result of the look up.</returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationRoleStore.FindByNameAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Finds the role who has the specified normalized name as an asynchronous operation.
            </summary>
            <param name="normalizedName">The normalized role name to look for.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that result of the look up.</returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationRoleStore.GetClaimsAsync(PortalCore.Domain.Entities.Identity.Role,System.Threading.CancellationToken)">
            <summary>
            Get the claims associated with the specified <paramref name="role"/> as an asynchronous operation.
            </summary>
            <param name="role">The role whose claims should be retrieved.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that contains the claims granted to a role.</returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationRoleStore.GetNormalizedRoleNameAsync(PortalCore.Domain.Entities.Identity.Role,System.Threading.CancellationToken)">
            <summary>
            Get a role's normalized name as an asynchronous operation.
            </summary>
            <param name="role">The role whose normalized name should be retrieved.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that contains the name of the role.</returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationRoleStore.RemoveClaimAsync(PortalCore.Domain.Entities.Identity.Role,System.Security.Claims.Claim,System.Threading.CancellationToken)">
            <summary>
            Removes the <paramref name="claim"/> given from the specified <paramref name="role"/>.
            </summary>
            <param name="role">The role to remove the claim from.</param>
            <param name="claim">The claim to remove from the role.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationRoleStore.SetNormalizedRoleNameAsync(PortalCore.Domain.Entities.Identity.Role,System.String,System.Threading.CancellationToken)">
            <summary>
            Set a role's normalized name as an asynchronous operation.
            </summary>
            <param name="role">The role whose normalized name should be set.</param>
            <param name="normalizedName">The normalized name to set</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationRoleStore.UpdateAsync(PortalCore.Domain.Entities.Identity.Role,System.Threading.CancellationToken)">
            <summary>
            Updates a role in a store as an asynchronous operation.
            </summary>
            <param name="role">The role to update in the store.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult"/> of the asynchronous query.</returns>
        </member>
        <member name="P:PortalCore.Application.Common.Identity.IApplicationSignInManager.Logger">
            <summary>
            Gets the <see cref="T:Microsoft.Extensions.Logging.ILogger"/> used to log messages from the manager.
            </summary>
            <value>
            The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> used to log messages from the manager.
            </value>
        </member>
        <member name="P:PortalCore.Application.Common.Identity.IApplicationSignInManager.UserManager">
            <summary>
            The <see cref="T:Microsoft.AspNetCore.Identity.UserManager`1"/> used.
            </summary>
        </member>
        <member name="P:PortalCore.Application.Common.Identity.IApplicationSignInManager.ClaimsFactory">
            <summary>
            The <see cref="T:Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory`1"/> used.
            </summary>
        </member>
        <member name="P:PortalCore.Application.Common.Identity.IApplicationSignInManager.Options">
            <summary>
            The <see cref="T:Microsoft.AspNetCore.Identity.IdentityOptions"/> used.
            </summary>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationSignInManager.CreateUserPrincipalAsync(PortalCore.Domain.Entities.Identity.User)">
            <summary>
            Creates a <see cref="T:System.Security.Claims.ClaimsPrincipal"/> for the specified <paramref name="user"/>, as an asynchronous operation.
            </summary>
            <param name="user">The user to create a <see cref="T:System.Security.Claims.ClaimsPrincipal"/> for.</param>
            <returns>The task object representing the asynchronous operation, containing the ClaimsPrincipal for the specified user.</returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationSignInManager.IsSignedIn(System.Security.Claims.ClaimsPrincipal)">
            <summary>
            Returns true if the principal has an identity with the application cookie identity
            </summary>
            <param name="principal">The <see cref="T:System.Security.Claims.ClaimsPrincipal"/> instance.</param>
            <returns>True if the user is logged in with identity.</returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationSignInManager.CanSignInAsync(PortalCore.Domain.Entities.Identity.User)">
            <summary>
            Returns a flag indicating whether the specified user can sign in.
            </summary>
            <param name="user">The user whose sign-in status should be returned.</param>
            <returns>
            The task object representing the asynchronous operation, containing a flag that is true
            if the specified user can sign-in, otherwise false.
            </returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationSignInManager.RefreshSignInAsync(PortalCore.Domain.Entities.Identity.User)">
            <summary>
            Regenerates the user's application cookie, whilst preserving the existing
            AuthenticationProperties like rememberMe, as an asynchronous operation.
            </summary>
            <param name="user">The user whose sign-in cookie should be refreshed.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationSignInManager.SignInAsync(PortalCore.Domain.Entities.Identity.User,System.Boolean,System.String)">
            <summary>
            Signs in the specified <paramref name="user"/>.
            </summary>
            <param name="user">The user to sign-in.</param>
            <param name="isPersistent">Flag indicating whether the sign-in cookie should persist after the browser is closed.</param>
            <param name="authenticationMethod">Name of the method used to authenticate the user.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationSignInManager.SignInAsync(PortalCore.Domain.Entities.Identity.User,Microsoft.AspNetCore.Authentication.AuthenticationProperties,System.String)">
            <summary>
            Signs in the specified <paramref name="user"/>.
            </summary>
            <param name="user">The user to sign-in.</param>
            <param name="authenticationProperties">Properties applied to the login and authentication cookie.</param>
            <param name="authenticationMethod">Name of the method used to authenticate the user.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationSignInManager.SignOutAsync">
            <summary>
            Signs the current user out of the application.
            </summary>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationSignInManager.ValidateSecurityStampAsync(System.Security.Claims.ClaimsPrincipal)">
            <summary>
            Validates the security stamp for the specified <paramref name="principal"/> against
            the persisted stamp for the current user, as an asynchronous operation.
            </summary>
            <param name="principal">The principal whose stamp should be validated.</param>
            <returns>The task object representing the asynchronous operation. The task will contain the <typeparamref name="User"/>
            if the stamp matches the persisted value, otherwise it will return false.</returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationSignInManager.PasswordSignInAsync(PortalCore.Domain.Entities.Identity.User,System.String,System.Boolean,System.Boolean)">
            <summary>
            Attempts to sign in the specified <paramref name="user"/> and <paramref name="password"/> combination
            as an asynchronous operation.
            </summary>
            <param name="user">The user to sign in.</param>
            <param name="password">The password to attempt to sign in with.</param>
            <param name="isPersistent">Flag indicating whether the sign-in cookie should persist after the browser is closed.</param>
            <param name="lockoutOnFailure">Flag indicating if the user account should be locked if the sign in fails.</param>
            <returns>The task object representing the asynchronous operation containing the <see name="SignInResult"/>
            for the sign-in attempt.</returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationSignInManager.PasswordSignInAsync(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Attempts to sign in the specified <paramref name="userName"/> and <paramref name="password"/> combination
            as an asynchronous operation.
            </summary>
            <param name="userName">The user name to sign in.</param>
            <param name="password">The password to attempt to sign in with.</param>
            <param name="isPersistent">Flag indicating whether the sign-in cookie should persist after the browser is closed.</param>
            <param name="lockoutOnFailure">Flag indicating if the user account should be locked if the sign in fails.</param>
            <returns>The task object representing the asynchronous operation containing the <see name="SignInResult"/>
            for the sign-in attempt.</returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationSignInManager.CheckPasswordSignInAsync(PortalCore.Domain.Entities.Identity.User,System.String,System.Boolean)">
            <summary>
            Attempts a password sign in for a user.
            </summary>
            <param name="user">The user to sign in.</param>
            <param name="password">The password to attempt to sign in with.</param>
            <param name="lockoutOnFailure">Flag indicating if the user account should be locked if the sign in fails.</param>
            <returns>The task object representing the asynchronous operation containing the <see name="SignInResult"/>
            for the sign-in attempt.</returns>
            <returns></returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationSignInManager.IsTwoFactorClientRememberedAsync(PortalCore.Domain.Entities.Identity.User)">
            <summary>
            Returns a flag indicating if the current client browser has been remembered by two factor authentication
            for the user attempting to login, as an asynchronous operation.
            </summary>
            <param name="user">The user attempting to login.</param>
            <returns>
            The task object representing the asynchronous operation containing true if the browser has been remembered
            for the current user.
            </returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationSignInManager.RememberTwoFactorClientAsync(PortalCore.Domain.Entities.Identity.User)">
            <summary>
            Sets a flag on the browser to indicate the user has selected "Remember this browser" for two factor authentication purposes,
            as an asynchronous operation.
            </summary>
            <param name="user">The user who choose "remember this browser".</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationSignInManager.ForgetTwoFactorClientAsync">
            <summary>
            Clears the "Remember this browser flag" from the current browser, as an asynchronous operation.
            </summary>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationSignInManager.TwoFactorRecoveryCodeSignInAsync(System.String)">
            <summary>
            Signs in the user without two factor authentication using a two factor recovery code.
            </summary>
            <param name="recoveryCode">The two factor recovery code.</param>
            <returns></returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationSignInManager.TwoFactorAuthenticatorSignInAsync(System.String,System.Boolean,System.Boolean)">
            <summary>
            Validates the sign in code from an authenticator app and creates and signs in the user, as an asynchronous operation.
            </summary>
            <param name="code">The two factor authentication code to validate.</param>
            <param name="isPersistent">Flag indicating whether the sign-in cookie should persist after the browser is closed.</param>
            <param name="rememberClient">Flag indicating whether the current browser should be remember, suppressing all further
            two factor authentication prompts.</param>
            <returns>The task object representing the asynchronous operation containing the <see name="SignInResult"/>
            for the sign-in attempt.</returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationSignInManager.TwoFactorSignInAsync(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Validates the two faction sign in code and creates and signs in the user, as an asynchronous operation.
            </summary>
            <param name="provider">The two factor authentication provider to validate the code against.</param>
            <param name="code">The two factor authentication code to validate.</param>
            <param name="isPersistent">Flag indicating whether the sign-in cookie should persist after the browser is closed.</param>
            <param name="rememberClient">Flag indicating whether the current browser should be remember, suppressing all further
            two factor authentication prompts.</param>
            <returns>The task object representing the asynchronous operation containing the <see name="SignInResult"/>
            for the sign-in attempt.</returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationSignInManager.GetTwoFactorAuthenticationUserAsync">
            <summary>
            Gets the <typeparamref name="User"/> for the current two factor authentication login, as an asynchronous operation.
            </summary>
            <returns>The task object representing the asynchronous operation containing the <typeparamref name="User"/>
            for the sign-in attempt.</returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationSignInManager.ExternalLoginSignInAsync(System.String,System.String,System.Boolean)">
            <summary>
            Signs in a user via a previously registered third party login, as an asynchronous operation.
            </summary>
            <param name="loginProvider">The login provider to use.</param>
            <param name="providerKey">The unique provider identifier for the user.</param>
            <param name="isPersistent">Flag indicating whether the sign-in cookie should persist after the browser is closed.</param>
            <returns>The task object representing the asynchronous operation containing the <see name="SignInResult"/>
            for the sign-in attempt.</returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationSignInManager.ExternalLoginSignInAsync(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Signs in a user via a previously registered third party login, as an asynchronous operation.
            </summary>
            <param name="loginProvider">The login provider to use.</param>
            <param name="providerKey">The unique provider identifier for the user.</param>
            <param name="isPersistent">Flag indicating whether the sign-in cookie should persist after the browser is closed.</param>
            <param name="bypassTwoFactor">Flag indicating whether to bypass two factor authentication.</param>
            <returns>The task object representing the asynchronous operation containing the <see name="SignInResult"/>
            for the sign-in attempt.</returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationSignInManager.GetExternalAuthenticationSchemesAsync">
            <summary>
            Gets a collection of <see cref="T:Microsoft.AspNetCore.Authentication.AuthenticationScheme"/>s for the known external login providers.
            </summary>
            <returns>A collection of <see cref="T:Microsoft.AspNetCore.Authentication.AuthenticationScheme"/>s for the known external login providers.</returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationSignInManager.GetExternalLoginInfoAsync(System.String)">
            <summary>
            Gets the external login information for the current login, as an asynchronous operation.
            </summary>
            <param name="expectedXsrf">Flag indication whether a Cross Site Request Forgery token was expected in the current request.</param>
            <returns>The task object representing the asynchronous operation containing the <see name="ExternalLoginInfo"/>
            for the sign-in attempt.</returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationSignInManager.UpdateExternalAuthenticationTokensAsync(Microsoft.AspNetCore.Identity.ExternalLoginInfo)">
            <summary>
            Stores any authentication tokens found in the external authentication cookie into the associated user.
            </summary>
            <param name="externalLogin">The information from the external login provider.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult"/> of the operation.</returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationSignInManager.ConfigureExternalAuthenticationProperties(System.String,System.String,System.String)">
            <summary>
            Configures the redirect URL and user identifier for the specified external login <paramref name="provider"/>.
            </summary>
            <param name="provider">The provider to configure.</param>
            <param name="redirectUrl">The external login URL users should be redirected to during the login flow.</param>
            <param name="userId">The current user's identifier, which will be used to provide CSRF protection.</param>
            <returns>A configured <see cref="T:Microsoft.AspNetCore.Authentication.AuthenticationProperties"/>.</returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationSignInManager.SignInOrTwoFactorAsync(PortalCore.Domain.Entities.Identity.User,System.Boolean,System.String,System.Boolean)">
            <summary>
            Signs in the specified <paramref name="user"/> if <paramref name="bypassTwoFactor"/> is set to false.
            Otherwise stores the <paramref name="user"/> for use after a two factor check.
            </summary>
            <param name="user"></param>
            <param name="isPersistent">Flag indicating whether the sign-in cookie should persist after the browser is closed.</param>
            <param name="loginProvider">The login provider to use. Default is null</param>
            <param name="bypassTwoFactor">Flag indicating whether to bypass two factor authentication. Default is false</param>
            <returns>Returns a <see cref="T:Microsoft.AspNetCore.Identity.SignInResult"/></returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationSignInManager.IsLockedOut(PortalCore.Domain.Entities.Identity.User)">
            <summary>
            Used to determine if a user is considered locked out.
            </summary>
            <param name="user">The user.</param>
            <returns>Whether a user is considered locked out.</returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationSignInManager.LockedOut(PortalCore.Domain.Entities.Identity.User)">
            <summary>
            Returns a locked out SignInResult.
            </summary>
            <param name="user">The user.</param>
            <returns>A locked out SignInResult</returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationSignInManager.PreSignInCheck(PortalCore.Domain.Entities.Identity.User)">
            <summary>
            Used to ensure that a user is allowed to sign in.
            </summary>
            <param name="user">The user</param>
            <returns>Null if the user should be allowed to sign in, otherwise the SignInResult why they should be denied.</returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationSignInManager.ResetLockout(PortalCore.Domain.Entities.Identity.User)">
            <summary>
            Used to reset a user's lockout count.
            </summary>
            <param name="user">The user</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult"/> of the operation.</returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationSignInManager.IsCurrentUserSignedIn">
            <summary>
            Returns true if the current user has an identity with the application cookie identity
            </summary>
            <returns>True if the current user is logged in with identity.</returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationSignInManager.ValidateCurrentUserSecurityStampAsync">
            <summary>
            Validates the security stamp for the current user against
            the persisted stamp for the current user, as an asynchronous operation.
            </summary>
            <returns>The task object representing the asynchronous operation. The task will contain the current user
            if the stamp matches the persisted value, otherwise it will return false.</returns>
        </member>
        <member name="P:PortalCore.Application.Common.Identity.IApplicationUserManager.Logger">
            <summary>
            The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> used to log messages from the manager.
            </summary>
            <value>
            The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> used to log messages from the manager.
            </value>
        </member>
        <member name="P:PortalCore.Application.Common.Identity.IApplicationUserManager.PasswordHasher">
            <summary>
            The <see cref="T:Microsoft.AspNetCore.Identity.IPasswordHasher`1"/> used to hash passwords.
            </summary>
        </member>
        <member name="P:PortalCore.Application.Common.Identity.IApplicationUserManager.UserValidators">
            <summary>
            The <see cref="T:Microsoft.AspNetCore.Identity.IUserValidator`1"/> used to validate users.
            </summary>
        </member>
        <member name="P:PortalCore.Application.Common.Identity.IApplicationUserManager.PasswordValidators">
            <summary>
            The <see cref="T:Microsoft.AspNetCore.Identity.IPasswordValidator`1"/> used to validate passwords.
            </summary>
        </member>
        <member name="P:PortalCore.Application.Common.Identity.IApplicationUserManager.KeyNormalizer">
            <summary>
            The <see cref="T:Microsoft.AspNetCore.Identity.ILookupNormalizer"/> used to normalize things like user and role names.
            </summary>
        </member>
        <member name="P:PortalCore.Application.Common.Identity.IApplicationUserManager.ErrorDescriber">
            <summary>
            The <see cref="T:Microsoft.AspNetCore.Identity.IdentityErrorDescriber"/> used to generate error messages.
            </summary>
        </member>
        <member name="P:PortalCore.Application.Common.Identity.IApplicationUserManager.Options">
            <summary>
            The <see cref="T:Microsoft.AspNetCore.Identity.IdentityOptions"/> used to configure Identity.
            </summary>
        </member>
        <member name="P:PortalCore.Application.Common.Identity.IApplicationUserManager.SupportsUserAuthenticationTokens">
            <summary>
            Gets a flag indicating whether the backing user store supports authentication tokens.
            </summary>
            <value>
            true if the backing user store supports authentication tokens, otherwise false.
            </value>
        </member>
        <member name="P:PortalCore.Application.Common.Identity.IApplicationUserManager.SupportsUserAuthenticatorKey">
            <summary>
            Gets a flag indicating whether the backing user store supports a user authenticator.
            </summary>
            <value>
            true if the backing user store supports a user authenticatior, otherwise false.
            </value>
        </member>
        <member name="P:PortalCore.Application.Common.Identity.IApplicationUserManager.SupportsUserTwoFactorRecoveryCodes">
            <summary>
            Gets a flag indicating whether the backing user store supports recovery codes.
            </summary>
            <value>
            true if the backing user store supports a user authenticatior, otherwise false.
            </value>
        </member>
        <member name="P:PortalCore.Application.Common.Identity.IApplicationUserManager.SupportsUserTwoFactor">
            <summary>
            Gets a flag indicating whether the backing user store supports two factor authentication.
            </summary>
            <value>
            true if the backing user store supports user two factor authentication, otherwise false.
            </value>
        </member>
        <member name="P:PortalCore.Application.Common.Identity.IApplicationUserManager.SupportsUserPassword">
            <summary>
            Gets a flag indicating whether the backing user store supports user passwords.
            </summary>
            <value>
            true if the backing user store supports user passwords, otherwise false.
            </value>
        </member>
        <member name="P:PortalCore.Application.Common.Identity.IApplicationUserManager.SupportsUserSecurityStamp">
            <summary>
            Gets a flag indicating whether the backing user store supports security stamps.
            </summary>
            <value>
            true if the backing user store supports user security stamps, otherwise false.
            </value>
        </member>
        <member name="P:PortalCore.Application.Common.Identity.IApplicationUserManager.SupportsUserRole">
            <summary>
            Gets a flag indicating whether the backing user store supports user roles.
            </summary>
            <value>
            true if the backing user store supports user roles, otherwise false.
            </value>
        </member>
        <member name="P:PortalCore.Application.Common.Identity.IApplicationUserManager.SupportsUserLogin">
            <summary>
            Gets a flag indicating whether the backing user store supports external logins.
            </summary>
            <value>
            true if the backing user store supports external logins, otherwise false.
            </value>
        </member>
        <member name="P:PortalCore.Application.Common.Identity.IApplicationUserManager.SupportsUserEmail">
            <summary>
            Gets a flag indicating whether the backing user store supports user emails.
            </summary>
            <value>
            true if the backing user store supports user emails, otherwise false.
            </value>
        </member>
        <member name="P:PortalCore.Application.Common.Identity.IApplicationUserManager.SupportsUserPhoneNumber">
            <summary>
            Gets a flag indicating whether the backing user store supports user telephone numbers.
            </summary>
            <value>
            true if the backing user store supports user telephone numbers, otherwise false.
            </value>
        </member>
        <member name="P:PortalCore.Application.Common.Identity.IApplicationUserManager.SupportsUserClaim">
            <summary>
            Gets a flag indicating whether the backing user store supports user claims.
            </summary>
            <value>
            true if the backing user store supports user claims, otherwise false.
            </value>
        </member>
        <member name="P:PortalCore.Application.Common.Identity.IApplicationUserManager.SupportsUserLockout">
            <summary>
            Gets a flag indicating whether the backing user store supports user lock-outs.
            </summary>
            <value>
            true if the backing user store supports user lock-outs, otherwise false.
            </value>
        </member>
        <member name="P:PortalCore.Application.Common.Identity.IApplicationUserManager.SupportsQueryableUsers">
            <summary>
            Gets a flag indicating whether the backing user store supports returning
            <see cref="T:System.Linq.IQueryable"/> collections of information.
            </summary>
            <value>
            true if the backing user store supports returning <see cref="T:System.Linq.IQueryable"/> collections of
            information, otherwise false.
            </value>
        </member>
        <member name="P:PortalCore.Application.Common.Identity.IApplicationUserManager.Users">
            <summary>
                Returns an IQueryable of users if the store is an IQueryableUserStore
            </summary>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserManager.GetUserName(System.Security.Claims.ClaimsPrincipal)">
            <summary>
            Returns the Name claim value if present otherwise returns null.
            </summary>
            <param name="principal">The <see cref="T:System.Security.Claims.ClaimsPrincipal"/> instance.</param>
            <returns>The Name claim value, or null if the claim is not present.</returns>
            <remarks>The Name claim is identified by <see cref="F:System.Security.Claims.ClaimsIdentity.DefaultNameClaimType"/>.</remarks>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserManager.GetUserId(System.Security.Claims.ClaimsPrincipal)">
            <summary>
            Returns the User ID claim value if present otherwise returns null.
            </summary>
            <param name="principal">The <see cref="T:System.Security.Claims.ClaimsPrincipal"/> instance.</param>
            <returns>The User ID claim value, or null if the claim is not present.</returns>
            <remarks>The User ID claim is identified by <see cref="F:System.Security.Claims.ClaimTypes.NameIdentifier"/>.</remarks>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserManager.GetUserAsync(System.Security.Claims.ClaimsPrincipal)">
            <summary>
            Returns the user corresponding to the IdentityOptions.ClaimsIdentity.UserIdClaimType claim in
            the principal or null.
            </summary>
            <param name="principal">The principal which contains the user id claim.</param>
            <returns>The user corresponding to the IdentityOptions.ClaimsIdentity.UserIdClaimType claim in
            the principal or null</returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserManager.GenerateConcurrencyStampAsync(PortalCore.Domain.Entities.Identity.User)">
            <summary>
            Generates a value suitable for use in concurrency tracking.
            </summary>
            <param name="user">The user to generate the stamp for.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the security
            stamp for the specified <paramref name="user"/>.
            </returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserManager.CreateAsync(PortalCore.Domain.Entities.Identity.User)">
            <summary>
            Creates the specified <paramref name="user"/> in the backing store with no password,
            as an asynchronous operation.
            </summary>
            <param name="user">The user to create.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult"/>
            of the operation.
            </returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserManager.UpdateAsync(PortalCore.Domain.Entities.Identity.User)">
            <summary>
            Updates the specified <paramref name="user"/> in the backing store.
            </summary>
            <param name="user">The user to update.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult"/>
            of the operation.
            </returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserManager.DeleteAsync(PortalCore.Domain.Entities.Identity.User)">
            <summary>
            Deletes the specified <paramref name="user"/> from the backing store.
            </summary>
            <param name="user">The user to delete.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult"/>
            of the operation.
            </returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserManager.FindByIdAsync(System.String)">
            <summary>
            Finds and returns a user, if any, who has the specified <paramref name="userId"/>.
            </summary>
            <param name="userId">The user ID to search for.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the user matching the specified <paramref name="userId"/> if it exists.
            </returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserManager.FindByNameAsync(System.String)">
            <summary>
            Finds and returns a user, if any, who has the specified user name.
            </summary>
            <param name="userName">The user name to search for.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the user matching the specified <paramref name="userName"/> if it exists.
            </returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserManager.CreateAsync(PortalCore.Domain.Entities.Identity.User,System.String)">
            <summary>
            Creates the specified <paramref name="user"/> in the backing store with given password,
            as an asynchronous operation.
            </summary>
            <param name="user">The user to create.</param>
            <param name="password">The password for the user to hash and store.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult"/>
            of the operation.
            </returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserManager.NormalizeEmail(System.String)">
            <summary>
            Normalize a key (user name, email) for consistent comparisons.
            </summary>
            <param name="email">The key to normalize.</param>
            <returns>A normalized value representing the specified <paramref name="email"/>.</returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserManager.NormalizeName(System.String)">
            <summary>
            Normalize a key (user name, email) for consistent comparisons.
            </summary>
            <param name="name">The key to normalize.</param>
            <returns>A normalized value representing the specified <paramref name="name"/>.</returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserManager.UpdateNormalizedUserNameAsync(PortalCore.Domain.Entities.Identity.User)">
            <summary>
            Updates the normalized user name for the specified <paramref name="user"/>.
            </summary>
            <param name="user">The user whose user name should be normalized and updated.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserManager.GetUserNameAsync(PortalCore.Domain.Entities.Identity.User)">
            <summary>
            Gets the user name for the specified <paramref name="user"/>.
            </summary>
            <param name="user">The user whose name should be retrieved.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the name for the specified <paramref name="user"/>.</returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserManager.SetUserNameAsync(PortalCore.Domain.Entities.Identity.User,System.String)">
            <summary>
            Sets the given <paramref name="userName" /> for the specified <paramref name="user"/>.
            </summary>
            <param name="user">The user whose name should be set.</param>
            <param name="userName">The user name to set.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserManager.GetUserIdAsync(PortalCore.Domain.Entities.Identity.User)">
            <summary>
            Gets the user identifier for the specified <paramref name="user"/>.
            </summary>
            <param name="user">The user whose identifier should be retrieved.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the identifier for the specified <paramref name="user"/>.</returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserManager.CheckPasswordAsync(PortalCore.Domain.Entities.Identity.User,System.String)">
            <summary>
            Returns a flag indicating whether the given <paramref name="password"/> is valid for the
            specified <paramref name="user"/>.
            </summary>
            <param name="user">The user whose password should be validated.</param>
            <param name="password">The password to validate</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing true if
            the specified <paramref name="password" /> matches the one store for the <paramref name="user"/>,
            otherwise false.</returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserManager.HasPasswordAsync(PortalCore.Domain.Entities.Identity.User)">
            <summary>
            Gets a flag indicating whether the specified <paramref name="user"/> has a password.
            </summary>
            <param name="user">The user to return a flag for, indicating whether they have a password or not.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, returning true if the specified <paramref name="user"/> has a password
            otherwise false.
            </returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserManager.AddPasswordAsync(PortalCore.Domain.Entities.Identity.User,System.String)">
            <summary>
            Adds the <paramref name="password"/> to the specified <paramref name="user"/> only if the user
            does not already have a password.
            </summary>
            <param name="user">The user whose password should be set.</param>
            <param name="password">The password to set.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult"/>
            of the operation.
            </returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserManager.ChangePasswordAsync(PortalCore.Domain.Entities.Identity.User,System.String,System.String)">
            <summary>
            Changes a user's password after confirming the specified <paramref name="currentPassword"/> is correct,
            as an asynchronous operation.
            </summary>
            <param name="user">The user whose password should be set.</param>
            <param name="currentPassword">The current password to validate before changing.</param>
            <param name="newPassword">The new password to set for the specified <paramref name="user"/>.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult"/>
            of the operation.
            </returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserManager.RemovePasswordAsync(PortalCore.Domain.Entities.Identity.User)">
            <summary>
            Removes a user's password.
            </summary>
            <param name="user">The user whose password should be removed.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult"/>
            of the operation.
            </returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserManager.VerifyPasswordAsync(Microsoft.AspNetCore.Identity.IUserPasswordStore{PortalCore.Domain.Entities.Identity.User},PortalCore.Domain.Entities.Identity.User,System.String)">
            <summary>
            Returns a <see cref="T:Microsoft.AspNetCore.Identity.PasswordVerificationResult"/> indicating the result of a password hash comparison.
            </summary>
            <param name="store">The store containing a user's password.</param>
            <param name="user">The user whose password should be verified.</param>
            <param name="password">The password to verify.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.PasswordVerificationResult"/>
            of the operation.
            </returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserManager.GetSecurityStampAsync(PortalCore.Domain.Entities.Identity.User)">
            <summary>
            Get the security stamp for the specified <paramref name="user" />.
            </summary>
            <param name="user">The user whose security stamp should be set.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the security stamp for the specified <paramref name="user"/>.</returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserManager.UpdateSecurityStampAsync(PortalCore.Domain.Entities.Identity.User)">
            <summary>
            Regenerates the security stamp for the specified <paramref name="user" />.
            </summary>
            <param name="user">The user whose security stamp should be regenerated.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult"/>
            of the operation.
            </returns>
            <remarks>
            Regenerating a security stamp will sign out any saved login for the user.
            </remarks>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserManager.GeneratePasswordResetTokenAsync(PortalCore.Domain.Entities.Identity.User)">
            <summary>
            Generates a password reset token for the specified <paramref name="user"/>, using
            the configured password reset token provider.
            </summary>
            <param name="user">The user to generate a password reset token for.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation,
            containing a password reset token for the specified <paramref name="user"/>.</returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserManager.ResetPasswordAsync(PortalCore.Domain.Entities.Identity.User,System.String,System.String)">
            <summary>
            Resets the <paramref name="user"/>'s password to the specified <paramref name="newPassword"/> after
            validating the given password reset <paramref name="token"/>.
            </summary>
            <param name="user">The user whose password should be reset.</param>
            <param name="token">The password reset token to verify.</param>
            <param name="newPassword">The new password to set if reset token verification fails.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult"/>
            of the operation.
            </returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserManager.FindByLoginAsync(System.String,System.String)">
            <summary>
            Retrieves the user associated with the specified external login provider and login provider key.
            </summary>
            <param name="loginProvider">The login provider who provided the <paramref name="providerKey"/>.</param>
            <param name="providerKey">The key provided by the <paramref name="loginProvider"/> to identify a user.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> for the asynchronous operation, containing the user, if any which matched the specified login provider and key.
            </returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserManager.RemoveLoginAsync(PortalCore.Domain.Entities.Identity.User,System.String,System.String)">
            <summary>
            Attempts to remove the provided external login information from the specified <paramref name="user"/>.
            and returns a flag indicating whether the removal succeed or not.
            </summary>
            <param name="user">The user to remove the login information from.</param>
            <param name="loginProvider">The login provide whose information should be removed.</param>
            <param name="providerKey">The key given by the external login provider for the specified user.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult"/>
            of the operation.
            </returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserManager.AddLoginAsync(PortalCore.Domain.Entities.Identity.User,Microsoft.AspNetCore.Identity.UserLoginInfo)">
            <summary>
            Adds an external <see cref="T:Microsoft.AspNetCore.Identity.UserLoginInfo"/> to the specified <paramref name="user"/>.
            </summary>
            <param name="user">The user to add the login to.</param>
            <param name="login">The external <see cref="T:Microsoft.AspNetCore.Identity.UserLoginInfo"/> to add to the specified <paramref name="user"/>.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult"/>
            of the operation.
            </returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserManager.GetLoginsAsync(PortalCore.Domain.Entities.Identity.User)">
            <summary>
            Retrieves the associated logins for the specified <param ref="user"/>.
            </summary>
            <param name="user">The user whose associated logins to retrieve.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> for the asynchronous operation, containing a list of <see cref="T:Microsoft.AspNetCore.Identity.UserLoginInfo"/> for the specified <paramref name="user"/>, if any.
            </returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserManager.AddClaimAsync(PortalCore.Domain.Entities.Identity.User,System.Security.Claims.Claim)">
            <summary>
            Adds the specified <paramref name="claim"/> to the <paramref name="user"/>.
            </summary>
            <param name="user">The user to add the claim to.</param>
            <param name="claim">The claim to add.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult"/>
            of the operation.
            </returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserManager.AddClaimsAsync(PortalCore.Domain.Entities.Identity.User,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})">
            <summary>
            Adds the specified <paramref name="claims"/> to the <paramref name="user"/>.
            </summary>
            <param name="user">The user to add the claim to.</param>
            <param name="claims">The claims to add.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult"/>
            of the operation.
            </returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserManager.ReplaceClaimAsync(PortalCore.Domain.Entities.Identity.User,System.Security.Claims.Claim,System.Security.Claims.Claim)">
            <summary>
            Replaces the given <paramref name="claim"/> on the specified <paramref name="user"/> with the <paramref name="newClaim"/>
            </summary>
            <param name="user">The user to replace the claim on.</param>
            <param name="claim">The claim to replace.</param>
            <param name="newClaim">The new claim to replace the existing <paramref name="claim"/> with.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult"/>
            of the operation.
            </returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserManager.RemoveClaimAsync(PortalCore.Domain.Entities.Identity.User,System.Security.Claims.Claim)">
            <summary>
            Removes the specified <paramref name="claim"/> from the given <paramref name="user"/>.
            </summary>
            <param name="user">The user to remove the specified <paramref name="claim"/> from.</param>
            <param name="claim">The <see cref="T:System.Security.Claims.Claim"/> to remove.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult"/>
            of the operation.
            </returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserManager.RemoveClaimsAsync(PortalCore.Domain.Entities.Identity.User,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})">
            <summary>
            Removes the specified <paramref name="claims"/> from the given <paramref name="user"/>.
            </summary>
            <param name="user">The user to remove the specified <paramref name="claims"/> from.</param>
            <param name="claims">A collection of <see cref="T:System.Security.Claims.Claim"/>s to remove.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult"/>
            of the operation.
            </returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserManager.GetClaimsAsync(PortalCore.Domain.Entities.Identity.User)">
            <summary>
            Gets a list of <see cref="T:System.Security.Claims.Claim"/>s to be belonging to the specified <paramref name="user"/> as an asynchronous operation.
            </summary>
            <param name="user">The user whose claims to retrieve.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the result of the asynchronous query, a list of <see cref="T:System.Security.Claims.Claim"/>s.
            </returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserManager.AddToRoleAsync(PortalCore.Domain.Entities.Identity.User,System.String)">
            <summary>
            Add the specified <paramref name="user"/> to the named role.
            </summary>
            <param name="user">The user to add to the named role.</param>
            <param name="role">The name of the role to add the user to.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult"/>
            of the operation.
            </returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserManager.AddToRolesAsync(PortalCore.Domain.Entities.Identity.User,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Add the specified <paramref name="user"/> to the named roles.
            </summary>
            <param name="user">The user to add to the named roles.</param>
            <param name="roles">The name of the roles to add the user to.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult"/>
            of the operation.
            </returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserManager.RemoveFromRoleAsync(PortalCore.Domain.Entities.Identity.User,System.String)">
            <summary>
            Removes the specified <paramref name="user"/> from the named role.
            </summary>
            <param name="user">The user to remove from the named role.</param>
            <param name="role">The name of the role to remove the user from.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult"/>
            of the operation.
            </returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserManager.RemoveFromRolesAsync(PortalCore.Domain.Entities.Identity.User,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Removes the specified <paramref name="user"/> from the named roles.
            </summary>
            <param name="user">The user to remove from the named roles.</param>
            <param name="roles">The name of the roles to remove the user from.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult"/>
            of the operation.
            </returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserManager.GetRolesAsync(PortalCore.Domain.Entities.Identity.User)">
            <summary>
            Gets a list of role names the specified <paramref name="user"/> belongs to.
            </summary>
            <param name="user">The user whose role names to retrieve.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing a list of role names.</returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserManager.IsInRoleAsync(PortalCore.Domain.Entities.Identity.User,System.String)">
            <summary>
            Returns a flag indicating whether the specified <paramref name="user"/> is a member of the give named role.
            </summary>
            <param name="user">The user whose role membership should be checked.</param>
            <param name="role">The name of the role to be checked.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing a flag indicating whether the specified <paramref name="user"/> is
            a member of the named role.
            </returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserManager.GetEmailAsync(PortalCore.Domain.Entities.Identity.User)">
            <summary>
            Gets the email address for the specified <paramref name="user"/>.
            </summary>
            <param name="user">The user whose email should be returned.</param>
            <returns>The task object containing the results of the asynchronous operation, the email address for the specified <paramref name="user"/>.</returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserManager.SetEmailAsync(PortalCore.Domain.Entities.Identity.User,System.String)">
            <summary>
            Sets the <paramref name="email"/> address for a <paramref name="user"/>.
            </summary>
            <param name="user">The user whose email should be set.</param>
            <param name="email">The email to set.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult"/>
            of the operation.
            </returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserManager.FindByEmailAsync(System.String)">
            <summary>
            Gets the user, if any, associated with the normalized value of the specified email address.
            </summary>
            <param name="email">The email address to return the user for.</param>
            <returns>
            The task object containing the results of the asynchronous lookup operation, the user, if any, associated with a normalized value of the specified email address.
            </returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserManager.UpdateNormalizedEmailAsync(PortalCore.Domain.Entities.Identity.User)">
            <summary>
            Updates the normalized email for the specified <paramref name="user"/>.
            </summary>
            <param name="user">The user whose email address should be normalized and updated.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserManager.GenerateEmailConfirmationTokenAsync(PortalCore.Domain.Entities.Identity.User)">
            <summary>
            Generates an email confirmation token for the specified user.
            </summary>
            <param name="user">The user to generate an email confirmation token for.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, an email confirmation token.
            </returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserManager.ConfirmEmailAsync(PortalCore.Domain.Entities.Identity.User,System.String)">
            <summary>
            Validates that an email confirmation token matches the specified <paramref name="user"/>.
            </summary>
            <param name="user">The user to validate the token against.</param>
            <param name="token">The email confirmation token to validate.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult"/>
            of the operation.
            </returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserManager.IsEmailConfirmedAsync(PortalCore.Domain.Entities.Identity.User)">
            <summary>
            Gets a flag indicating whether the email address for the specified <paramref name="user"/> has been verified, true if the email address is verified otherwise
            false.
            </summary>
            <param name="user">The user whose email confirmation status should be returned.</param>
            <returns>
            The task object containing the results of the asynchronous operation, a flag indicating whether the email address for the specified <paramref name="user"/>
            has been confirmed or not.
            </returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserManager.GenerateChangeEmailTokenAsync(PortalCore.Domain.Entities.Identity.User,System.String)">
            <summary>
            Generates an email change token for the specified user.
            </summary>
            <param name="user">The user to generate an email change token for.</param>
            <param name="newEmail">The new email address.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, an email change token.
            </returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserManager.ChangeEmailAsync(PortalCore.Domain.Entities.Identity.User,System.String,System.String)">
            <summary>
            Updates a users emails if the specified email change <paramref name="token"/> is valid for the user.
            </summary>
            <param name="user">The user whose email should be updated.</param>
            <param name="newEmail">The new email address.</param>
            <param name="token">The change email token to be verified.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult"/>
            of the operation.
            </returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserManager.GetPhoneNumberAsync(PortalCore.Domain.Entities.Identity.User)">
            <summary>
            Gets the telephone number, if any, for the specified <paramref name="user"/>.
            </summary>
            <param name="user">The user whose telephone number should be retrieved.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the user's telephone number, if any.</returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserManager.SetPhoneNumberAsync(PortalCore.Domain.Entities.Identity.User,System.String)">
            <summary>
            Sets the phone number for the specified <paramref name="user"/>.
            </summary>
            <param name="user">The user whose phone number to set.</param>
            <param name="phoneNumber">The phone number to set.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult"/>
            of the operation.
            </returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserManager.ChangePhoneNumberAsync(PortalCore.Domain.Entities.Identity.User,System.String,System.String)">
            <summary>
            Sets the phone number for the specified <paramref name="user"/> if the specified
            change <paramref name="token"/> is valid.
            </summary>
            <param name="user">The user whose phone number to set.</param>
            <param name="phoneNumber">The phone number to set.</param>
            <param name="token">The phone number confirmation token to validate.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult"/>
            of the operation.
            </returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserManager.IsPhoneNumberConfirmedAsync(PortalCore.Domain.Entities.Identity.User)">
            <summary>
            Gets a flag indicating whether the specified <paramref name="user"/>'s telephone number has been confirmed.
            </summary>
            <param name="user">The user to return a flag for, indicating whether their telephone number is confirmed.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, returning true if the specified <paramref name="user"/> has a confirmed
            telephone number otherwise false.
            </returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserManager.GenerateChangePhoneNumberTokenAsync(PortalCore.Domain.Entities.Identity.User,System.String)">
            <summary>
            Generates a telephone number change token for the specified user.
            </summary>
            <param name="user">The user to generate a telephone number token for.</param>
            <param name="phoneNumber">The new phone number the validation token should be sent to.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the telephone change number token.
            </returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserManager.VerifyChangePhoneNumberTokenAsync(PortalCore.Domain.Entities.Identity.User,System.String,System.String)">
            <summary>
            Returns a flag indicating whether the specified <paramref name="user"/>'s phone number change verification
            token is valid for the given <paramref name="phoneNumber"/>.
            </summary>
            <param name="user">The user to validate the token against.</param>
            <param name="token">The telephone number change token to validate.</param>
            <param name="phoneNumber">The telephone number the token was generated for.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, returning true if the <paramref name="token"/>
            is valid, otherwise false.
            </returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserManager.VerifyUserTokenAsync(PortalCore.Domain.Entities.Identity.User,System.String,System.String,System.String)">
            <summary>
            Returns a flag indicating whether the specified <paramref name="token"/> is valid for
            the given <paramref name="user"/> and <paramref name="purpose"/>.
            </summary>
            <param name="user">The user to validate the token against.</param>
            <param name="tokenProvider">The token provider used to generate the token.</param>
            <param name="purpose">The purpose the token should be generated for.</param>
            <param name="token">The token to validate</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, returning true if the <paramref name="token"/>
            is valid, otherwise false.
            </returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserManager.GenerateUserTokenAsync(PortalCore.Domain.Entities.Identity.User,System.String,System.String)">
            <summary>
            Generates a token for the given <paramref name="user"/> and <paramref name="purpose"/>.
            </summary>
            <param name="user">The user the token will be for.</param>
            <param name="tokenProvider">The provider which will generate the token.</param>
            <param name="purpose">The purpose the token will be for.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents result of the asynchronous operation, a token for
            the given user and purpose.
            </returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserManager.RegisterTokenProvider(System.String,Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider{PortalCore.Domain.Entities.Identity.User})">
            <summary>
            Registers a token provider.
            </summary>
            <param name="providerName">The name of the provider to register.</param>
            <param name="provider">The provider to register.</param>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserManager.GetValidTwoFactorProvidersAsync(PortalCore.Domain.Entities.Identity.User)">
            <summary>
            Gets a list of valid two factor token providers for the specified <paramref name="user"/>,
            as an asynchronous operation.
            </summary>
            <param name="user">The user the whose two factor authentication providers will be returned.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents result of the asynchronous operation, a list of two
            factor authentication providers for the specified user.
            </returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserManager.VerifyTwoFactorTokenAsync(PortalCore.Domain.Entities.Identity.User,System.String,System.String)">
            <summary>
            Verifies the specified two factor authentication <paramref name="token" /> against the <paramref name="user"/>.
            </summary>
            <param name="user">The user the token is supposed to be for.</param>
            <param name="tokenProvider">The provider which will verify the token.</param>
            <param name="token">The token to verify.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents result of the asynchronous operation, true if the token is valid,
            otherwise false.
            </returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserManager.GenerateTwoFactorTokenAsync(PortalCore.Domain.Entities.Identity.User,System.String)">
            <summary>
            Gets a two factor authentication token for the specified <paramref name="user"/>.
            </summary>
            <param name="user">The user the token is for.</param>
            <param name="tokenProvider">The provider which will generate the token.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents result of the asynchronous operation, a two factor authentication token
            for the user.
            </returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserManager.GetTwoFactorEnabledAsync(PortalCore.Domain.Entities.Identity.User)">
            <summary>
            Returns a flag indicating whether the specified <paramref name="user"/> has two factor authentication enabled or not,
            as an asynchronous operation.
            </summary>
            <param name="user">The user whose two factor authentication enabled status should be retrieved.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, true if the specified <paramref name="user "/>
            has two factor authentication enabled, otherwise false.
            </returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserManager.SetTwoFactorEnabledAsync(PortalCore.Domain.Entities.Identity.User,System.Boolean)">
            <summary>
            Sets a flag indicating whether the specified <paramref name="user"/> has two factor authentication enabled or not,
            as an asynchronous operation.
            </summary>
            <param name="user">The user whose two factor authentication enabled status should be set.</param>
            <param name="enabled">A flag indicating whether the specified <paramref name="user"/> has two factor authentication enabled.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult"/> of the operation
            </returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserManager.IsLockedOutAsync(PortalCore.Domain.Entities.Identity.User)">
            <summary>
            Returns a flag indicating whether the specified <paramref name="user"/> his locked out,
            as an asynchronous operation.
            </summary>
            <param name="user">The user whose locked out status should be retrieved.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, true if the specified <paramref name="user "/>
            is locked out, otherwise false.
            </returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserManager.SetLockoutEnabledAsync(PortalCore.Domain.Entities.Identity.User,System.Boolean)">
            <summary>
            Sets a flag indicating whether the specified <paramref name="user"/> is locked out,
            as an asynchronous operation.
            </summary>
            <param name="user">The user whose locked out status should be set.</param>
            <param name="enabled">Flag indicating whether the user is locked out or not.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult"/> of the operation
            </returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserManager.GetLockoutEnabledAsync(PortalCore.Domain.Entities.Identity.User)">
            <summary>
            Retrieves a flag indicating whether user lockout can enabled for the specified user.
            </summary>
            <param name="user">The user whose ability to be locked out should be returned.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, true if a user can be locked out, otherwise false.
            </returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserManager.GetLockoutEndDateAsync(PortalCore.Domain.Entities.Identity.User)">
            <summary>
            Gets the last <see cref="T:System.DateTimeOffset"/> a user's last lockout expired, if any.
            Any time in the past should be indicates a user is not locked out.
            </summary>
            <param name="user">The user whose lockout date should be retrieved.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the lookup, a <see cref="T:System.DateTimeOffset"/> containing the last time a user's lockout expired, if any.
            </returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserManager.SetLockoutEndDateAsync(PortalCore.Domain.Entities.Identity.User,System.Nullable{System.DateTimeOffset})">
            <summary>
            Locks out a user until the specified end date has passed. Setting a end date in the past immediately unlocks a user.
            </summary>
            <param name="user">The user whose lockout date should be set.</param>
            <param name="lockoutEnd">The <see cref="T:System.DateTimeOffset"/> after which the <paramref name="user"/>'s lockout should end.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult"/> of the operation.</returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserManager.AccessFailedAsync(PortalCore.Domain.Entities.Identity.User)">
            <summary>
            Increments the access failed count for the user as an asynchronous operation.
            If the failed access account is greater than or equal to the configured maximum number of attempts,
            the user will be locked out for the configured lockout time span.
            </summary>
            <param name="user">The user whose failed access count to increment.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult"/> of the operation.</returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserManager.ResetAccessFailedCountAsync(PortalCore.Domain.Entities.Identity.User)">
            <summary>
            Resets the access failed count for the specified <paramref name="user"/>.
            </summary>
            <param name="user">The user whose failed access count should be reset.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult"/> of the operation.</returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserManager.GetAccessFailedCountAsync(PortalCore.Domain.Entities.Identity.User)">
            <summary>
            Retrieves the current number of failed accesses for the given <paramref name="user"/>.
            </summary>
            <param name="user">The user whose access failed count should be retrieved for.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that contains the result the asynchronous operation, the current failed access count
            for the user.</returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserManager.GetUsersForClaimAsync(System.Security.Claims.Claim)">
            <summary>
            Returns a list of users from the user store who have the specified <paramref name="claim"/>.
            </summary>
            <param name="claim">The claim to look for.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the result of the asynchronous query, a list of <typeparamref name="TUser"/>s who
            have the specified claim.
            </returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserManager.GetUsersInRoleAsync(System.String)">
            <summary>
            Returns a list of users from the user store who are members of the specified <paramref name="roleName"/>.
            </summary>
            <param name="roleName">The name of the role whose users should be returned.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the result of the asynchronous query, a list of <typeparamref name="TUser"/>s who
            are members of the specified role.
            </returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserManager.GetAuthenticationTokenAsync(PortalCore.Domain.Entities.Identity.User,System.String,System.String)">
            <summary>
            Returns an authentication token for a user.
            </summary>
            <param name="user"></param>
            <param name="loginProvider">The authentication scheme for the provider the token is associated with.</param>
            <param name="tokenName">The name of the token.</param>
            <returns>The authentication token for a user</returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserManager.SetAuthenticationTokenAsync(PortalCore.Domain.Entities.Identity.User,System.String,System.String,System.String)">
            <summary>
            Sets an authentication token for a user.
            </summary>
            <param name="user"></param>
            <param name="loginProvider">The authentication scheme for the provider the token is associated with.</param>
            <param name="tokenName">The name of the token.</param>
            <param name="tokenValue">The value of the token.</param>
            <returns>Whether the user was successfully updated.</returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserManager.RemoveAuthenticationTokenAsync(PortalCore.Domain.Entities.Identity.User,System.String,System.String)">
            <summary>
            Remove an authentication token for a user.
            </summary>
            <param name="user"></param>
            <param name="loginProvider">The authentication scheme for the provider the token is associated with.</param>
            <param name="tokenName">The name of the token.</param>
            <returns>Whether a token was removed.</returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserManager.GetAuthenticatorKeyAsync(PortalCore.Domain.Entities.Identity.User)">
            <summary>
            Returns the authenticator key for the user.
            </summary>
            <param name="user">The user.</param>
            <returns>The authenticator key</returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserManager.ResetAuthenticatorKeyAsync(PortalCore.Domain.Entities.Identity.User)">
            <summary>
            Resets the authenticator key for the user.
            </summary>
            <param name="user">The user.</param>
            <returns>Whether the user was successfully updated.</returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserManager.GenerateNewAuthenticatorKey">
            <summary>
            Generates a new base32 encoded 160-bit security secret (size of SHA1 hash).
            </summary>
            <returns>The new security secret.</returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserManager.GenerateNewTwoFactorRecoveryCodesAsync(PortalCore.Domain.Entities.Identity.User,System.Int32)">
            <summary>
            Generates recovery codes for the user, this invalidates any previous recovery codes for the user.
            </summary>
            <param name="user">The user to generate recovery codes for.</param>
            <param name="number">The number of codes to generate.</param>
            <returns>The new recovery codes for the user.  Note: there may be less than number returned, as duplicates will be removed.</returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserManager.CreateTwoFactorRecoveryCode">
            <summary>
            Generate a new recovery code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserManager.RedeemTwoFactorRecoveryCodeAsync(PortalCore.Domain.Entities.Identity.User,System.String)">
            <summary>
            Returns whether a recovery code is valid for a user. Note: recovery codes are only valid
            once, and will be invalid after use.
            </summary>
            <param name="user">The user who owns the recovery code.</param>
            <param name="code">The recovery code to use.</param>
            <returns>True if the recovery code was found for the user.</returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserManager.CountRecoveryCodesAsync(PortalCore.Domain.Entities.Identity.User)">
            <summary>
            Returns how many recovery code are still valid for a user.
            </summary>
            <param name="user">The user.</param>
            <returns>How many recovery code are still valid for a user.</returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserManager.CreateSecurityTokenAsync(PortalCore.Domain.Entities.Identity.User)">
            <summary>
            Creates bytes to use as a security token from the user's security stamp.
            </summary>
            <param name="user">The user.</param>
            <returns>The security token bytes.</returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserManager.UpdatePasswordHash(PortalCore.Domain.Entities.Identity.User,System.String,System.Boolean)">
            <summary>
            Updates a user's password hash.
            </summary>
            <param name="user">The user.</param>
            <param name="newPassword">The new password.</param>
            <param name="validatePassword">Whether to validate the password.</param>
            <returns>Whether the password has was successfully updated.</returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserManager.GetCurrentUser">
            <summary>
            Returns the current user corresponding or null.
            </summary>
            <returns>Returns the current user corresponding or null.</returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserManager.GetCurrentUserAsync">
            <summary>
            Returns the current user corresponding or null.
            </summary>
            <returns>Returns the current user corresponding or null.</returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserManager.GetCurrentUserId">
            <summary>
            Returns the current User ID claim value if present otherwise returns null.
            </summary>
            <returns>The current User ID claim value, or null if the claim is not present.</returns>
        </member>
        <member name="P:PortalCore.Application.Common.Identity.IApplicationUserManager.CurrentUserId">
            <summary>
            Returns the current User ID claim value if present otherwise returns null.
            </summary>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserManager.GetCurrentUserName">
            <summary>
            Returns the current user Name claim value if present otherwise returns null.
            </summary>
            <returns>The current user Name claim value, or null if the claim is not present.</returns>
        </member>
        <member name="P:PortalCore.Application.Common.Identity.IApplicationUserStore.AutoSaveChanges">
            <summary>
            Gets or sets a flag indicating if changes should be persisted after CreateAsync, UpdateAsync and DeleteAsync are called.
            </summary>
            <value>
            True if changes should be automatically persisted, otherwise false.
            </value>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserStore.CreateAsync(PortalCore.Domain.Entities.Identity.User,System.Threading.CancellationToken)">
            <summary>
            Creates the specified <paramref name="user"/> in the user store.
            </summary>
            <param name="user">The user to create.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult"/> of the creation operation.</returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserStore.UpdateAsync(PortalCore.Domain.Entities.Identity.User,System.Threading.CancellationToken)">
            <summary>
            Updates the specified <paramref name="user"/> in the user store.
            </summary>
            <param name="user">The user to update.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult"/> of the update operation.</returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserStore.DeleteAsync(PortalCore.Domain.Entities.Identity.User,System.Threading.CancellationToken)">
            <summary>
            Deletes the specified <paramref name="user"/> from the user store.
            </summary>
            <param name="user">The user to delete.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult"/> of the update operation.</returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserStore.FindByIdAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Finds and returns a user, if any, who has the specified <paramref name="userId"/>.
            </summary>
            <param name="userId">The user ID to search for.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the user matching the specified <paramref name="userId"/> if it exists.
            </returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserStore.FindByNameAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Finds and returns a user, if any, who has the specified normalized user name.
            </summary>
            <param name="normalizedUserName">The normalized user name to search for.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation, containing the user matching the specified <paramref name="normalizedUserName"/> if it exists.
            </returns>
        </member>
        <member name="P:PortalCore.Application.Common.Identity.IApplicationUserStore.Users">
            <summary>
            A navigation property for the users the store contains.
            </summary>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserStore.FindRoleAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Return a role with the normalized name if it exists.
            </summary>
            <param name="normalizedRoleName">The normalized role name.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>The role if it exists.</returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserStore.FindUserRoleAsync(System.Guid,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Return a user role for the userId and roleId if it exists.
            </summary>
            <param name="userId">The user's id.</param>
            <param name="roleId">The role's id.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>The user role if it exists.</returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserStore.FindUserAsync(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Return a user with the matching userId if it exists.
            </summary>
            <param name="userId">The user's id.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>The user if it exists.</returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserStore.FindUserLoginAsync(System.Guid,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Return a user login with the matching userId, provider, providerKey if it exists.
            </summary>
            <param name="userId">The user's id.</param>
            <param name="loginProvider">The login provider name.</param>
            <param name="providerKey">The key provided by the <paramref name="loginProvider"/> to identify a user.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>The user login if it exists.</returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserStore.FindUserLoginAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Return a user login with  provider, providerKey if it exists.
            </summary>
            <param name="loginProvider">The login provider name.</param>
            <param name="providerKey">The key provided by the <paramref name="loginProvider"/> to identify a user.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>The user login if it exists.</returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserStore.AddToRoleAsync(PortalCore.Domain.Entities.Identity.User,System.String,System.Threading.CancellationToken)">
            <summary>
            Adds the given <paramref name="normalizedRoleName"/> to the specified <paramref name="user"/>.
            </summary>
            <param name="user">The user to add the role to.</param>
            <param name="normalizedRoleName">The role to add.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserStore.RemoveFromRoleAsync(PortalCore.Domain.Entities.Identity.User,System.String,System.Threading.CancellationToken)">
            <summary>
            Removes the given <paramref name="normalizedRoleName"/> from the specified <paramref name="user"/>.
            </summary>
            <param name="user">The user to remove the role from.</param>
            <param name="normalizedRoleName">The role to remove.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserStore.GetRolesAsync(PortalCore.Domain.Entities.Identity.User,System.Threading.CancellationToken)">
            <summary>
            Retrieves the roles the specified <paramref name="user"/> is a member of.
            </summary>
            <param name="user">The user whose roles should be retrieved.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that contains the roles the user is a member of.</returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserStore.IsInRoleAsync(PortalCore.Domain.Entities.Identity.User,System.String,System.Threading.CancellationToken)">
            <summary>
            Returns a flag indicating if the specified user is a member of the give <paramref name="normalizedRoleName"/>.
            </summary>
            <param name="user">The user whose role membership should be checked.</param>
            <param name="normalizedRoleName">The role to check membership of</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> containing a flag indicating if the specified user is a member of the given group. If the
            user is a member of the group the returned value with be true, otherwise it will be false.</returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserStore.GetClaimsAsync(PortalCore.Domain.Entities.Identity.User,System.Threading.CancellationToken)">
            <summary>
            Get the claims associated with the specified <paramref name="user"/> as an asynchronous operation.
            </summary>
            <param name="user">The user whose claims should be retrieved.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that contains the claims granted to a user.</returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserStore.AddClaimsAsync(PortalCore.Domain.Entities.Identity.User,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)">
            <summary>
            Adds the <paramref name="claims"/> given to the specified <paramref name="user"/>.
            </summary>
            <param name="user">The user to add the claim to.</param>
            <param name="claims">The claim to add to the user.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserStore.ReplaceClaimAsync(PortalCore.Domain.Entities.Identity.User,System.Security.Claims.Claim,System.Security.Claims.Claim,System.Threading.CancellationToken)">
            <summary>
            Replaces the <paramref name="claim"/> on the specified <paramref name="user"/>, with the <paramref name="newClaim"/>.
            </summary>
            <param name="user">The user to replace the claim on.</param>
            <param name="claim">The claim replace.</param>
            <param name="newClaim">The new claim replacing the <paramref name="claim"/>.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserStore.RemoveClaimsAsync(PortalCore.Domain.Entities.Identity.User,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)">
            <summary>
            Removes the <paramref name="claims"/> given from the specified <paramref name="user"/>.
            </summary>
            <param name="user">The user to remove the claims from.</param>
            <param name="claims">The claim to remove.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserStore.AddLoginAsync(PortalCore.Domain.Entities.Identity.User,Microsoft.AspNetCore.Identity.UserLoginInfo,System.Threading.CancellationToken)">
            <summary>
            Adds the <paramref name="login"/> given to the specified <paramref name="user"/>.
            </summary>
            <param name="user">The user to add the login to.</param>
            <param name="login">The login to add to the user.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserStore.RemoveLoginAsync(PortalCore.Domain.Entities.Identity.User,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Removes the <paramref name="loginProvider"/> given from the specified <paramref name="user"/>.
            </summary>
            <param name="user">The user to remove the login from.</param>
            <param name="loginProvider">The login to remove from the user.</param>
            <param name="providerKey">The key provided by the <paramref name="loginProvider"/> to identify a user.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserStore.GetLoginsAsync(PortalCore.Domain.Entities.Identity.User,System.Threading.CancellationToken)">
            <summary>
            Retrieves the associated logins for the specified <param ref="user"/>.
            </summary>
            <param name="user">The user whose associated logins to retrieve.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> for the asynchronous operation, containing a list of <see cref="T:Microsoft.AspNetCore.Identity.UserLoginInfo"/> for the specified <paramref name="user"/>, if any.
            </returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserStore.FindByLoginAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves the user associated with the specified login provider and login provider key.
            </summary>
            <param name="loginProvider">The login provider who provided the <paramref name="providerKey"/>.</param>
            <param name="providerKey">The key provided by the <paramref name="loginProvider"/> to identify a user.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> for the asynchronous operation, containing the user, if any which matched the specified login provider and key.
            </returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserStore.FindByEmailAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the user, if any, associated with the specified, normalized email address.
            </summary>
            <param name="normalizedEmail">The normalized email address to return the user for.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>
            The task object containing the results of the asynchronous lookup operation, the user if any associated with the specified normalized email address.
            </returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserStore.GetUsersForClaimAsync(System.Security.Claims.Claim,System.Threading.CancellationToken)">
            <summary>
            Retrieves all users with the specified claim.
            </summary>
            <param name="claim">The claim whose users should be retrieved.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> contains a list of users, if any, that contain the specified claim.
            </returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserStore.GetUsersInRoleAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves all users in the specified role.
            </summary>
            <param name="normalizedRoleName">The role whose users should be retrieved.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> contains a list of users, if any, that are in the specified role.
            </returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserStore.FindTokenAsync(PortalCore.Domain.Entities.Identity.User,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Find a user token if it exists.
            </summary>
            <param name="user">The token owner.</param>
            <param name="loginProvider">The login provider for the token.</param>
            <param name="name">The name of the token.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>The user token if it exists.</returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserStore.AddUserTokenAsync(PortalCore.Domain.Entities.Identity.UserToken)">
            <summary>
            Add a new user token.
            </summary>
            <param name="token">The token to be added.</param>
            <returns></returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IApplicationUserStore.RemoveUserTokenAsync(PortalCore.Domain.Entities.Identity.UserToken)">
            <summary>
            Remove a new user token.
            </summary>
            <param name="token">The token to be removed.</param>
            <returns></returns>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IIdentityDbInitializer.Initialize">
            <summary>
            Applies any pending migrations for the context to the database.
            Will create the database if it does not already exist.
            </summary>
        </member>
        <member name="M:PortalCore.Application.Common.Identity.IIdentityDbInitializer.SeedData">
            <summary>
            Adds some default values to the IdentityDb
            </summary>
        </member>
        <member name="P:PortalCore.Application.Common.Models.SearchQueryResponse`1.Page">
            <summary>
            صفحه
            </summary>
        </member>
        <member name="P:PortalCore.Application.Common.Models.SearchQueryResponse`1.PageSize">
            <summary>
            اندازه صفحه
            </summary>
        </member>
        <member name="P:PortalCore.Application.Common.Models.SearchQueryResponse`1.Items">
            <summary>
            آیتم ها
            </summary>
        </member>
        <member name="P:PortalCore.Application.Common.Models.SearchQueryResponse`1.TotalCount">
            <summary>
            تعداد کل
            </summary>
        </member>
        <member name="P:PortalCore.Application.Common.Models.SearchQueryResponse`1.TotalCountDisplay">
            <summary>
            تعداد کل نمایشی
            </summary>
        </member>
        <member name="P:PortalCore.Application.Common.Models.SearchQueryResponse`1.TotalPages">
            <summary>
            تعداد کل صفحات
            </summary>
        </member>
        <member name="P:PortalCore.Application.Common.Models.SearchQueryResponse`1.HasPreviousPage">
            <summary>
            صفحه قبلی دارد
            </summary>
        </member>
        <member name="P:PortalCore.Application.Common.Models.SearchQueryResponse`1.HasNextPage">
            <summary>
            صفحه بعدی دارد
            </summary>
        </member>
        <member name="P:PortalCore.Application.Common.Models.SearchQueryResponse`1.TotalPagesDisplay">
            <summary>
            تعداد کل صفحات نمایشی
            </summary>
        </member>
        <member name="P:PortalCore.Application.Common.Models.SearchQueryResponse`1.PageCountAndCurrentLocationDisplay">
            <summary>
            شمارنده صفحه
            </summary>
        </member>
        <member name="T:PortalCore.Application.Common.Security.AuthorizeAttribute">
            <summary>
            Specifies the class this attribute is applied to requires authorization.
            </summary>
        </member>
        <member name="M:PortalCore.Application.Common.Security.AuthorizeAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PortalCore.Application.Common.Security.AuthorizeAttribute"/> class.
            </summary>
        </member>
        <member name="P:PortalCore.Application.Common.Security.AuthorizeAttribute.Roles">
            <summary>
            Gets or sets a comma delimited list of roles that are allowed to access the resource.
            </summary>
        </member>
        <member name="P:PortalCore.Application.Common.Security.AuthorizeAttribute.Policy">
            <summary>
            Gets or sets the policy name that determines access to the resource.
            </summary>
        </member>
    </members>
</doc>
